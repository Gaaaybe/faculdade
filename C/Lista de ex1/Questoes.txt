< Recursividade >

1. Implemente um programa que apresente o elemento n da sequência Fibonacci solicitado pelo usuário. O programa receberá a entrada n e devolverá o valor da sequência. Por exemplo, para a entrada n=5 o valor que será retornado é  3.

Sequência: 0 1 1 2 3 5 8 13 21 34 …

Utilize uma função para retornar esse valor e a implemente de forma recursiva.

2. Faça um programa para ler e armazenar um conjunto de números em um vetor (máximo 30 números e a leitura de um número igual a zero indica fim da leitura dos dados). A seguir peça para o usuário digitar um valor inteiro e informe se o mesmo pertence ou não ao conjunto de números armazenados. O programa deve implementar e usar a função busca, que recebe como parâmetro um vetor de números inteiros (vet) de tamanho n e um valor x. A função deve retornar 1 se x pertence a esse vetor e 0 caso contrário. O protótipo da função pode ser: 

int busca(int vet[], int n, int x);

3. Faça um programa para ler uma matriz digitada pelo usuário (tamanho 3x3) e exibir uma mensagem dizendo se a mesma é uma matriz identidade ou não. O seu programa deve implementar e utilizar a função matriz_identidade, que recebe como parâmetro uma matriz quadrada de inteiros de dimensão n, e retorna 1 se a matriz for uma matriz identidade, e 0 caso contrário. O protótipo da função pode ser: 

int matriz_identidade(int mat[][N], int t); 

Lembre-se que uma matriz é considerada identidade quando os elementos da diagonal principal são todos iguais a 1 e os elementos restantes são iguais a zero.

<Struct> <Busca e Ordenação>

1. Faça um programa para ler e armazenar um conjunto de números em um vetor (máximo 30 números e a leitura de um número igual a zero indica fim da leitura dos dados). A seguir peça para o usuário digitar um valor inteiro e informe se o mesmo pertence ou não ao conjunto de números armazenados. O programa deve implementar e usar a função busca, que recebe como parâmetro um vetor de números inteiros (vet) de tamanho n e um valor x. A função deve retornar 1 se x pertence a esse vetor e 0 caso contrário. O protótipo da função pode ser: (mesma questão da lista anterior)

int busca(int vet[], int n, int x);

2. Simule o funcionamento do algoritmo de busca binária para determinar se os itens 33, 50, 77, 90 e 99 constam do vetor L = (10, 16, 27, 31, 33, 37, 41, 49, 53, 57, 68, 69, 72, 77, 84, 89, 95, 99).

3. Faça as alterações necessárias para que o algoritmo de busca binária funcione com vetores ordenados de forma decrescente.

4. Implemente um programa que leia o nome, a idade e o endereço de uma pessoa e armazene os dados em uma estrutura.

5. Construa uma estrutura aluno com nome, número de matrícula e curso. Leia do usuário a informação de 5 alunos, armazene em vetor dessa estrutura e imprima os dados na tela.

6. Crie uma estrutura representando os alunos de um determinado curso. A estrutura deve conter a matrícula do aluno, nome, nota da primeira prova, nota da segunda prova e nota da terceira prova.

(a) Permita ao usuário entrar com os dados de 5 alunos. 
(b) Encontre o aluno com maior nota da primeira prova.
(c) Encontre o aluno com maior média geral.
(d) Encontre o aluno com menor média geral 
(e) Para cada aluno diga se ele foi aprovado ou reprovado, considerando o valor 6 para aprovação.
